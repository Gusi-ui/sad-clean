// Script para debug del servicio de notificaciones desde el servidor
require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîß Debug del Servicio de Notificaciones');
console.log('=====================================');

// Crear cliente con service role para acceso completo
const supabase = createClient(supabaseUrl, serviceRoleKey || supabaseKey);

async function debugNotificationService() {
  try {
    console.log('\nüîç PASO 1: Verificando configuraci√≥n...');
    console.log('URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
    console.log('Anon Key:', supabaseKey ? '‚úÖ' : '‚ùå');
    console.log('Service Role:', serviceRoleKey ? '‚úÖ' : '‚ùå');

    // Probar la inserci√≥n directamente
    console.log(
      '\nüìù PASO 2: Probando inserci√≥n directa en worker_notifications...'
    );

    const workerId = 'ac958cab-ae08-4a8f-a95f-b34fa0d7e940'; // UUID v√°lido
    const testNotification = {
      worker_id: workerId,
      title: 'üîß Debug Test',
      body: 'Esta es una notificaci√≥n de debug - ' + new Date().toISOString(),
      type: 'system_message',
      priority: 'normal',
      data: { debug: true, timestamp: new Date().toISOString() },
    };

    console.log(
      'üìã Datos a insertar:',
      JSON.stringify(testNotification, null, 2)
    );

    const { data: insertResult, error: insertError } = await supabase
      .from('worker_notifications')
      .insert(testNotification)
      .select();

    if (insertError) {
      console.log('\n‚ùå ERROR en inserci√≥n:');
      console.log('C√≥digo:', insertError.code);
      console.log('Mensaje:', insertError.message);
      console.log('Detalles:', insertError.details);
      console.log('Hint:', insertError.hint);

      // Verificar si es un problema de permisos
      if (
        insertError.code === '42501' ||
        insertError.message.includes('permission')
      ) {
        console.log('\nüîê Parece ser un problema de permisos RLS');
        console.log('Verificando pol√≠ticas RLS...');

        // Verificar si hay pol√≠ticas RLS
        const { data: policies, error: policiesError } = await supabase.rpc(
          'get_policies',
          { table_name: 'worker_notifications' }
        );

        if (policiesError) {
          console.log('‚ùå Error obteniendo pol√≠ticas:', policiesError.message);
        } else {
          console.log('üìã Pol√≠ticas RLS encontradas:', policies);
        }
      }

      return false;
    }

    console.log('\n‚úÖ Inserci√≥n exitosa!');
    console.log('üìã Resultado:', JSON.stringify(insertResult, null, 2));

    // Limpiar la notificaci√≥n de debug
    if (insertResult && insertResult.length > 0) {
      console.log('\nüßπ Limpiando notificaci√≥n de debug...');
      await supabase
        .from('worker_notifications')
        .delete()
        .eq('id', insertResult[0].id);
      console.log('‚úÖ Limpieza completada');
    }

    // Verificar estructura de la tabla
    console.log('\nüìä PASO 3: Verificando estructura de la tabla...');
    const { data: tableStructure, error: structureError } = await supabase
      .from('worker_notifications')
      .select('*')
      .limit(1);

    if (structureError) {
      console.log('‚ùå Error obteniendo estructura:', structureError.message);
    } else {
      console.log('‚úÖ Estructura de tabla OK');
      if (tableStructure && tableStructure.length > 0) {
        console.log('Campos disponibles:', Object.keys(tableStructure[0]));
      }
    }

    // Verificar workers disponibles
    console.log('\nüë• PASO 4: Verificando workers disponibles...');
    const { data: workers, error: workersError } = await supabase
      .from('workers')
      .select('id, name, surname')
      .limit(3);

    if (workersError) {
      console.log('‚ùå Error obteniendo workers:', workersError.message);
    } else {
      console.log('‚úÖ Workers encontrados:', workers?.length || 0);
      if (workers && workers.length > 0) {
        workers.forEach((worker, index) => {
          console.log(
            `  ${index + 1}. ${worker.name} ${worker.surname || ''} (${worker.id})`
          );
        });
      }
    }

    console.log('\nüéØ RESULTADO:');
    if (insertResult && insertResult.length > 0) {
      console.log(
        '‚úÖ El servicio de notificaciones deber√≠a funcionar correctamente'
      );
      console.log(
        'üí° El problema podr√≠a estar en el c√≥digo del servicio, no en la base de datos'
      );
    } else {
      console.log(
        '‚ùå Hay un problema fundamental con la inserci√≥n en la base de datos'
      );
    }

    return true;
  } catch (error) {
    console.log('\n‚ùå ERROR GENERAL:', error.message);
    console.log('Stack:', error.stack);
    return false;
  }
}

debugNotificationService().catch(console.error);
