# 🚀 SAD LAS - Reglas del Proyecto para Cursor

## 📋 **CONTEXTO DEL PROYECTO**

Este es un sistema de gestión de horas y asignaciones para trabajadores de servicios asistenciales domiciliarios (SAD). El objetivo es mantener un proyecto 100% libre de errores y warnings desde el inicio.

## 🎯 **OBJETIVO PRINCIPAL**

Mantener un proyecto **100% libre de errores y warnings** desde el inicio, con código limpio, mantenible y profesional.

## 📁 **ESTRUCTURA DEL PROYECTO**

```
src/
├── app/                    # Next.js App Router
├── components/            # Componentes React
│   ├── ui/               # Componentes base
│   ├── forms/            # Formularios
│   ├── dashboard/        # Componentes del dashboard
│   └── common/           # Componentes comunes
├── lib/                  # Utilidades y configuraciones
├── hooks/                # Custom hooks
├── types/                # Tipos TypeScript
└── styles/               # Estilos adicionales
```

## 🔧 **REGLAS DE CÓDIGO OBLIGATORIAS**

### **TypeScript**

- ✅ TypeScript estricto obligatorio
- ✅ Tipos explícitos para todo
- ❌ NO usar `any` bajo ninguna circunstancia
- ✅ Interfaces y tipos bien definidos

### **Nomenclatura**

- ✅ Variables: camelCase
- ✅ Componentes: PascalCase
- ✅ Constantes: UPPER_SNAKE_CASE
- ✅ Archivos: kebab-case
- ✅ Nombres descriptivos y claros

### **Imports (Orden obligatorio)**

```typescript
// 1. Librerías externas
import React from 'react';
import { useEffect, useState } from 'react';

// 2. Módulos internos
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/useAuth';
// 3. Tipos
import type { User } from '@/types';

// 4. Estilos
import './styles.css';
```

### **Logging**

- ❌ NO usar `console.log` en producción
- ✅ Usar sistema de logging apropiado
- ✅ Logs informativos para debugging

## 🎨 **DISEÑO Y UX**

### **Paleta de Colores**

```css
/* Colores Principales */
--primary: #3b82f6; /* Azul profesional */
--secondary: #22c55e; /* Verde éxito */
--accent: #f97316; /* Naranja atención */
--neutral: #64748b; /* Grises */

/* Estados */
--success: #22c55e; /* Verde */
--warning: #f59e0b; /* Amarillo */
--error: #ef4444; /* Rojo */
--info: #3b82f6; /* Azul claro */
```

### **Responsividad y Accesibilidad**

- ✅ Mobile-first design
- ✅ Componentes responsive por defecto
- ✅ Roles ARIA apropiados
- ✅ Labels para formularios
- ✅ Contraste de colores adecuado
- ✅ Navegación por teclado

## 📝 **COMMITS**

### **Formato de Commits**

```bash
# Formato: tipo(alcance): descripción
git commit -m "feat(auth): add login functionality"
git commit -m "fix(workers): resolve form validation issue"
git commit -m "docs(readme): update installation instructions"
```

### **Tipos de Commit Permitidos**

- `feat`: Nueva funcionalidad
- `fix`: Corrección de bug
- `docs`: Documentación
- `style`: Formato de código
- `refactor`: Refactorización
- `perf`: Mejoras de rendimiento
- `test`: Tests
- `build`: Cambios en build
- `ci`: Cambios en CI/CD
- `chore`: Tareas de mantenimiento

## ✅ **CHECKLIST PRE-COMMIT**

### **Validaciones Obligatorias**

- [ ] `npm run lint` - 0 errores, 0 warnings
- [ ] `npm run type-check` - 0 errores
- [ ] `npm run format:check` - Código formateado
- [ ] Tests pasan (cuando se implementen)
- [ ] **Funcionalidad probada en navegador de desarrollo**
- [ ] **Verificación visual de componentes**
- [ ] **Prueba de interacciones de usuario**

### **Revisión de Código**

- [ ] Props tipadas
- [ ] Sin console.log
- [ ] Sin imports no utilizados
- [ ] Sin variables no utilizadas
- [ ] Dependencias de hooks correctas
- [ ] Componentes accesibles
- [ ] Diseño responsive

### **Verificación en Navegador**

- [ ] **Servidor de desarrollo ejecutándose** (`npm run dev`)
- [ ] **Página cargada correctamente** (sin errores en consola)
- [ ] **Componentes renderizados** (verificación visual)
- [ ] **Funcionalidad probada** (botones, formularios, navegación)
- [ ] **Responsive design** (mobile, tablet, desktop)
- [ ] **Accesibilidad básica** (navegación por teclado, contraste)
- [ ] **Performance aceptable** (sin lag visible)

## 🚨 **MANEJO DE ERRORES**

### **Principios**

- ✅ Manejo de errores claro y amigable
- ❌ NO exponer información sensible
- ✅ Mensajes de error descriptivos
- ✅ Fallbacks apropiados

### **Estructura de Error Handling**

```typescript
try {
  // Operación que puede fallar
} catch (error) {
  // Log del error para debugging
  console.error('Error en operación:', error);

  // Mostrar mensaje amigable al usuario
  setError('Ha ocurrido un error. Inténtalo de nuevo.');
}
```

## 🎯 **PRINCIPIOS FUNDAMENTALES**

### **Código Limpio**

- ✅ Legibilidad sobre brevedad
- ✅ Funciones pequeñas y enfocadas
- ✅ Nombres descriptivos
- ✅ Comentarios cuando sea necesario

### **Mantenibilidad**

- ✅ Código modular
- ✅ Separación de responsabilidades
- ✅ Reutilización de componentes
- ✅ Documentación clara

### **Escalabilidad**

- ✅ Arquitectura flexible
- ✅ Componentes reutilizables
- ✅ Configuración centralizada
- ✅ Patrones consistentes

## 📚 **COMANDOS ÚTILES**

### **Desarrollo**

```bash
npm run dev              # Servidor de desarrollo
npm run build            # Construir para producción
npm run start            # Servidor de producción
```

### **Calidad de Código**

```bash
npm run lint             # Verificar linting
npm run lint:fix         # Corregir errores de linting
npm run type-check       # Verificar tipos TypeScript
npm run format           # Formatear código
npm run format:check     # Verificar formato
```

## 🚀 **OBJETIVO FINAL**

Este proyecto debe ser:

- ✅ **Limpio**: Sin errores ni warnings
- ✅ **Mantenible**: Código bien estructurado
- ✅ **Escalable**: Arquitectura modular
- ✅ **Profesional**: Mejores prácticas aplicadas
- ✅ **Productivo**: Listo para desarrollo real

## 💡 **INSTRUCCIONES PARA CURSOR**

Al generar código para este proyecto:

1. **SIEMPRE** verifica que no haya errores de TypeScript
2. **SIEMPRE** usa tipos explícitos, nunca `any`
3. **SIEMPRE** sigue la estructura de carpetas definida
4. **SIEMPRE** usa la paleta de colores especificada
5. **SIEMPRE** implementa diseño mobile-first
6. **SIEMPRE** incluye manejo de errores apropiado
7. **SIEMPRE** verifica accesibilidad básica
8. **SIEMPRE** usa el formato de commits convencional
9. **SIEMPRE** organiza imports en el orden especificado
10. **SIEMPRE** mantén componentes puros y reutilizables
11. **SIEMPRE** sugiere probar la funcionalidad en navegador antes de commit
12. **SIEMPRE** verifica que el servidor de desarrollo esté ejecutándose

## 🔗 **INTEGRACIÓN MCP DE SUPABASE**

Este proyecto tiene integración MCP con Supabase. Cuando trabajes con la base de datos:

- ✅ **Usa el esquema real**: Consulta la estructura actual de las tablas
- ✅ **Genera queries válidas**: Basa las consultas en el esquema existente
- ✅ **Crea tipos TypeScript**: Genera tipos basados en las tablas reales
- ✅ **Valida el código**: Asegúrate de que coincida con el esquema de BD
- ✅ **Optimiza consultas**: Sugiere mejoras en la estructura de datos

### **Comandos MCP Útiles**

- "Muéstrame la estructura de la tabla [nombre]"
- "Genera un query para [operación]"
- "Crea tipos TypeScript para [tabla]"
- "Sugiere mejoras en el esquema de BD"

**¡Disfruta desarrollando tu aplicación SAD LAS! 🚀**
