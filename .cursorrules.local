# üöÄ SAD LAS - Configuraci√≥n Local para Cursor

## üéØ **INSTRUCCIONES ESPEC√çFICAS PARA CURSOR**

Cuando trabajes en este proyecto SAD LAS, SIEMPRE sigue estas reglas:

### **1. ESTRUCTURA DE ARCHIVOS**
- ‚úÖ Respeta la estructura de carpetas definida
- ‚úÖ Un componente por archivo
- ‚úÖ Usa las carpetas correctas: `components/ui/`, `components/forms/`, `hooks/`, `types/`, etc.

### **2. TYPESCRIPT ESTRICTO**
- ‚úÖ SIEMPRE usa tipos expl√≠citos
- ‚ùå NUNCA uses `any`
- ‚úÖ Define interfaces para props y datos
- ‚úÖ Usa tipos de Supabase cuando est√©n disponibles

### **3. COMPONENTES REACT**
```typescript
// Formato obligatorio para componentes
import React from 'react';
import { cn } from '@/lib/utils';

interface ComponentProps {
  // Props tipadas
}

export const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // L√≥gica del componente
  return (
    <div className="...">
      {/* JSX */}
    </div>
  );
};
```

### **4. PALETA DE COLORES**
```css
/* Usa SIEMPRE estos colores */
--primary: #3b82f6;      /* Azul profesional */
--secondary: #22c55e;     /* Verde √©xito */
--accent: #f97316;        /* Naranja atenci√≥n */
--neutral: #64748b;       /* Grises */
--success: #22c55e;       /* Verde */
--warning: #f59e0b;       /* Amarillo */
--error: #ef4444;         /* Rojo */
--info: #3b82f6;          /* Azul claro */
```

### **5. DISE√ëO RESPONSIVE**
- ‚úÖ Mobile-first design
- ‚úÖ Usa Tailwind CSS classes
- ‚úÖ Breakpoints: sm, md, lg, xl, 2xl
- ‚úÖ Componentes accesibles

### **6. MANEJO DE ERRORES**
```typescript
// SIEMPRE incluye manejo de errores
try {
  // Operaci√≥n
} catch (error) {
  console.error('Error:', error);
  // Mostrar mensaje amigable al usuario
}
```

### **7. IMPORTS ORGANIZADOS**
```typescript
// 1. Librer√≠as externas
import React from 'react';
import { useState, useEffect } from 'react';

// 2. M√≥dulos internos
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/useAuth';

// 3. Tipos
import type { User } from '@/types';

// 4. Estilos
import './styles.css';
```

### **8. COMMITS**
- ‚úÖ Usa formato convencional: `tipo(alcance): descripci√≥n`
- ‚úÖ Tipos: feat, fix, docs, style, refactor, perf, test, build, ci, chore

### **9. VALIDACIONES OBLIGATORIAS**
Antes de sugerir c√≥digo, verifica:
- [ ] No hay errores de TypeScript
- [ ] No hay console.log en producci√≥n
- [ ] Imports organizados
- [ ] Componentes accesibles
- [ ] Dise√±o responsive
- [ ] Manejo de errores incluido

### **10. VERIFICACI√ìN EN NAVEGADOR**
Antes de hacer commit, SIEMPRE sugiere:
- [ ] **Ejecutar servidor de desarrollo**: `npm run dev`
- [ ] **Abrir navegador**: `http://localhost:3000`
- [ ] **Verificar funcionalidad**: Probar botones, formularios, navegaci√≥n
- [ ] **Verificar responsive**: Probar en mobile, tablet, desktop
- [ ] **Verificar accesibilidad**: Navegaci√≥n por teclado, contraste
- [ ] **Verificar performance**: Sin lag visible, carga r√°pida
- [ ] **Verificar errores**: Sin errores en consola del navegador

### **11. CONTEXTO DEL PROYECTO**
Este es un sistema de gesti√≥n para trabajadores de servicios asistenciales domiciliarios (SAD). Incluye:
- Gesti√≥n de usuarios/workers
- Asignaci√≥n de tareas
- Control de horas trabajadas
- Dashboard de administraci√≥n
- Sistema de autenticaci√≥n

### **12. TECNOLOG√çAS**
- Next.js 14 (App Router)
- TypeScript estricto
- Tailwind CSS
- Supabase (BD + Auth)
- ESLint + Prettier
- Husky + lint-staged

### **13. OBJETIVO**
Mantener un proyecto **100% libre de errores y warnings** desde el inicio.

**¬°Recuerda: Calidad sobre velocidad! üöÄ**
