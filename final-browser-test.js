// SCRIPT FINAL PARA PROBAR NOTIFICACIONES EN EL NAVEGADOR
// COPIA Y PEGA TODO ESTE C√ìDIGO EN LA CONSOLA DEL NAVEGADOR

// Funci√≥n para diagnosticar
async function diagnoseDatabase() {
  console.log('üîç Diagnosticando sistema de notificaciones...');
  try {
    const response = await fetch('/api/diagnose');
    if (!response.ok) {
      console.error('‚ùå Error HTTP:', response.status);
      return false;
    }
    const result = await response.json();
    console.log('üìã Resultados:');
    console.log('üîß Supabase:', result.supabase?.url || 'No configurada');

    Object.entries(result.tests || {}).forEach(function (entry) {
      var testName = entry[0];
      var testResult = entry[1];
      if (testResult.status === 'OK') {
        console.log('‚úÖ ' + testName + ': OK');
      } else {
        console.log('‚ùå ' + testName + ': ERROR -', testResult.error);
      }
    });

    return (
      result.tests?.connection?.status === 'OK' &&
      result.tests?.worker_notifications?.status === 'OK'
    );
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return false;
  }
}

// Funci√≥n para obtener workers disponibles
async function getAvailableWorkers() {
  console.log('üë• Obteniendo lista de workers...');
  try {
    const response = await fetch('/api/workers');
    if (!response.ok) {
      console.log('‚ö†Ô∏è No se pudo obtener lista de workers');
      return [];
    }
    const result = await response.json();
    console.log('üìã Workers encontrados:', result.workers?.length || 0);

    if (result.isTestData) {
      console.log('üìù Usando datos de prueba');
    }

    const workerIds =
      result.workers?.map(function (w) {
        return w.id;
      }) || [];

    if (result.workers && result.workers.length > 0) {
      console.log('üë• Workers disponibles:');
      result.workers.forEach(function (worker, index) {
        console.log(
          '  ' +
            (index + 1) +
            '. ' +
            worker.name +
            ' ' +
            worker.surname +
            ' (' +
            worker.email +
            ')'
        );
      });
    }

    return workerIds;
  } catch (error) {
    console.log('‚ö†Ô∏è Error obteniendo workers');
    return [];
  }
}

// Funci√≥n de prueba completa del sistema
async function testFullNotificationSystem() {
  console.log('üöÄ PRUEBA COMPLETA DEL SISTEMA DE NOTIFICACIONES');
  console.log('===============================================');

  // 1. Diagn√≥stico
  console.log('\nüìã PASO 1: Verificando configuraci√≥n...');
  const diagnosisOK = await diagnoseDatabase();
  if (!diagnosisOK) {
    console.log('‚ùå Diagn√≥stico fallido - Revisa la configuraci√≥n');
    return;
  }
  console.log('‚úÖ Configuraci√≥n correcta');

  // 2. Obtener workers
  console.log('\nüë• PASO 2: Obteniendo workers...');
  const workers = await getAvailableWorkers();
  if (workers.length === 0) {
    console.log('‚ùå No hay workers disponibles');
    return;
  }

  const workerId = workers[0];
  console.log('‚úÖ Worker seleccionado:', workerId);

  // 3. Probar notificaci√≥n b√°sica
  console.log('\nüß™ PASO 3: Enviando notificaci√≥n de prueba...');
  try {
    const response = await fetch('/api/test-notifications', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        workerId: workerId,
        title: 'üß™ Prueba desde Navegador',
        body:
          'Esta notificaci√≥n confirma que el sistema funciona correctamente desde el navegador - ' +
          new Date().toLocaleTimeString(),
        type: 'system_message',
      }),
    });

    const result = await response.json();

    if (response.ok && result.success) {
      console.log('‚úÖ Notificaci√≥n enviada exitosamente');
      console.log('üìã ID de notificaci√≥n:', result.notification?.id);
    } else {
      console.log('‚ùå Error enviando notificaci√≥n:', result.error);
      return;
    }
  } catch (error) {
    console.log('‚ùå Error de conexi√≥n:', error.message);
    return;
  }

  // 4. Esperar un momento
  console.log('\n‚è≥ PASO 4: Esperando sincronizaci√≥n...');
  await new Promise(function (resolve) {
    setTimeout(resolve, 2000);
  });

  // 5. Verificar estado de notificaciones
  console.log('\nüìä PASO 5: Verificando estado...');
  try {
    const notificationsResponse = await fetch(
      '/api/workers/' + workerId + '/notifications'
    );
    const unreadResponse = await fetch(
      '/api/workers/' + workerId + '/notifications/unread-count'
    );

    const notifications = await notificationsResponse.json();
    const unreadData = await unreadResponse.json();

    console.log(
      'üìã Total de notificaciones:',
      notifications.notifications?.length || 0
    );
    console.log('üìä No le√≠das:', unreadData.unread_count || 0);

    if (notifications.notifications && notifications.notifications.length > 0) {
      console.log('\n‚úÖ ¬°SISTEMA FUNCIONANDO PERFECTAMENTE!');

      const latestNotification = notifications.notifications[0];
      console.log('üìù √öltima notificaci√≥n:');
      console.log('   T√≠tulo:', latestNotification.title);
      console.log('   Mensaje:', latestNotification.body);
      console.log('   Tipo:', latestNotification.type);

      console.log('\nüéØ RESULTADO FINAL:');
      console.log('==================');
      console.log('‚úÖ Foreign key constraint: RESUELTA');
      console.log('‚úÖ Workers coinciden con auth users: CONFIRMADO');
      console.log('‚úÖ Valores v√°lidos para worker_type: VERIFICADO');
      console.log('‚úÖ Notificaciones funcionando: CONFIRMADO');

      console.log('\nüéä ¬°FELICITACIONES! El sistema est√° 100% operativo');
      console.log('================================================');
      console.log('');
      console.log('üì± ACCIONES RECOMENDADAS:');
      console.log('=========================');
      console.log('1. ‚úÖ Ve al dashboard de trabajadores');
      console.log(
        '2. ‚úÖ Busca el icono de campana (üîî) en la esquina superior'
      );
      console.log('3. ‚úÖ Deber√≠as ver la notificaci√≥n que acabamos de enviar');
      console.log('4. ‚úÖ Haz clic en la notificaci√≥n para marcarla como le√≠da');
      console.log(
        '5. ‚úÖ Prueba crear m√°s notificaciones desde el panel administrativo'
      );
      console.log('');
      console.log(
        'üéØ El sistema de notificaciones est√° completamente funcional!'
      );

      return true;
    } else {
      console.log(
        '‚ö†Ô∏è Las notificaciones se guardaron pero no se muestran en la lista'
      );
      return false;
    }
  } catch (error) {
    console.log('‚ùå Error verificando estado:', error.message);
    return false;
  }
}

// Funci√≥n para probar notificaci√≥n r√°pida
async function quickNotificationTest() {
  console.log('‚ö° PRUEBA R√ÅPIDA DE NOTIFICACIONES');

  try {
    const workers = await getAvailableWorkers();
    if (workers.length === 0) {
      console.log('‚ùå No hay workers disponibles');
      return;
    }

    const workerId = workers[0];
    console.log('üë§ Usando worker:', workerId);

    const response = await fetch('/api/test-notifications', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        workerId: workerId,
        title: '‚ö° Prueba R√°pida',
        body:
          'Notificaci√≥n enviada desde funci√≥n r√°pida - ' +
          new Date().toLocaleTimeString(),
        type: 'system_message',
      }),
    });

    const result = await response.json();

    if (response.ok && result.success) {
      console.log('‚úÖ ¬°Notificaci√≥n enviada exitosamente!');
      console.log('üí° Ve al dashboard para ver la notificaci√≥n');
    } else {
      console.log('‚ùå Error:', result.error);
    }
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// Hacer funciones globales
window.diagnoseDatabase = diagnoseDatabase;
window.getAvailableWorkers = getAvailableWorkers;
window.testFullNotificationSystem = testFullNotificationSystem;
window.quickNotificationTest = quickNotificationTest;

console.log('üéØ SISTEMA DE NOTIFICACIONES LISTO PARA PRUEBA FINAL');
console.log('===================================================');
console.log('');
console.log('Funciones disponibles:');
console.log('- testFullNotificationSystem()  üöÄ Ejecutar prueba completa');
console.log('- quickNotificationTest()       ‚ö° Prueba r√°pida');
console.log('- diagnoseDatabase()           üîç Solo diagn√≥stico');
console.log('- getAvailableWorkers()        üë• Ver workers disponibles');
console.log('');
console.log('üí° COMANDO RECOMENDADO: testFullNotificationSystem()');
console.log('');
console.log('Esto ejecutar√° una prueba completa del sistema y te dir√°');
console.log('exactamente qu√© hacer despu√©s.');

// Ejecutar diagn√≥stico autom√°tico
diagnoseDatabase();
