name: Build Mobile APK

on:
  push:
    branches: [mobile-app]
  pull_request:
    branches: [mobile-app]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Android APK

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: mobile-app/package-lock.json

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm

      - name: Install dependencies
        timeout-minutes: 10
        run: |
          cd mobile-app
          npm install --legacy-peer-deps

      - name: Generate icon
        run: |
          cd mobile-app
          npm run generate-icon

      - name: Setup EAS Project
        timeout-minutes: 5
        run: |
          cd mobile-app
          echo "Checking authentication status..."
          eas whoami
          echo "Verifying project configuration..."
          eas project:info || eas project:init --non-interactive
          echo "Project setup completed"

      - name: Run linting
        timeout-minutes: 5
        run: |
          cd mobile-app
          npx eslint .

      - name: Run type checking
        timeout-minutes: 5
        run: |
          cd mobile-app
          npm run type-check

      - name: Build APK with EAS
        timeout-minutes: 30
        run: |
          cd mobile-app
          echo "Building Android APK with EAS..."
          eas build --platform android --profile preview --non-interactive --wait || {
            echo "EAS build failed or timed out, trying local build as fallback..."
            npm run build:android-apk
          }

      - name: Download APK
        timeout-minutes: 10
        run: |
          cd mobile-app

          # Check if local build was used (fallback scenario)
          if [ -f "build-*.apk" ] || [ -f "*.apk" ]; then
            echo "Local APK build found, using it..."
            APK_FILE=$(find . -name "*.apk" -type f | head -1)
            if [ -n "$APK_FILE" ]; then
              cp "$APK_FILE" sad-las-worker.apk
              echo "Local APK copied successfully"
              ls -la sad-las-worker.apk
            fi
          else
            # Try to download from EAS
            echo "Attempting to download APK from EAS..."
            
            # Wait a bit for build to be processed
            sleep 10
            
            # Get the latest build info with timeout
            timeout 60 bash -c '
              while true; do
                BUILD_INFO=$(eas build:list --platform android --status finished --limit 1 --json 2>/dev/null || echo "[]")
                if [ "$BUILD_INFO" != "[]" ]; then
                  BUILD_URL=$(echo $BUILD_INFO | jq -r ".[0].artifacts.buildUrl" 2>/dev/null || echo "null")
                  if [ "$BUILD_URL" != "null" ] && [ "$BUILD_URL" != "" ]; then
                    echo "Downloading APK from: $BUILD_URL"
                    curl -L -o sad-las-worker.apk "$BUILD_URL" && break
                  fi
                fi
                echo "Waiting for build to complete..."
                sleep 15
              done
            ' || {
              echo "Timeout waiting for EAS build, this may indicate the build is still in progress"
              echo "Creating a placeholder APK for now..."
              echo "APK build in progress" > sad-las-worker.txt
              exit 1
            }
            
            if [ -f "sad-las-worker.apk" ]; then
              echo "APK downloaded successfully"
              ls -la sad-las-worker.apk
            else
              echo "Failed to download APK"
              exit 1
            fi
          fi

      - name: Get version info
        id: version
        run: |
          cd mobile-app
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION-mobile-$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sad-las-worker-apk
          path: mobile-app/sad-las-worker.apk
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/mobile-app' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "SAD LAS Worker v${{ steps.version.outputs.version }} (Build ${{ steps.version.outputs.build_number }})"
          body: |
            ## 📱 SAD LAS Worker - Aplicación Móvil

            ### 📦 Descarga
            Descarga el archivo **sad-las-worker.apk** desde los assets de este release para instalar la aplicación en tu dispositivo Android.

            ### 📋 Información de la Build
            - **Versión**: ${{ steps.version.outputs.version }}
            - **Build**: ${{ steps.version.outputs.build_number }}
            - **Commit**: ${{ github.sha }}
            - **Rama**: ${{ github.ref_name }}
            - **Fecha**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

            ### 🔧 Instalación
            1. Descarga el archivo `sad-las-worker.apk`
            2. En tu dispositivo Android, ve a **Configuración > Seguridad**
            3. Habilita **"Fuentes desconocidas"** o **"Instalar aplicaciones desconocidas"**
            4. Abre el archivo APK descargado e instala la aplicación

            ### 📝 Cambios Recientes
            ${{ github.event.head_commit.message }}

            ### ⚠️ Notas Importantes
            - Esta es una versión de desarrollo/testing
            - Probar todas las funcionalidades antes de usar en producción
            - Reportar cualquier problema en los Issues del repositorio

            ---

            **🤖 Generado automáticamente por GitHub Actions**
          files: |
            mobile-app/sad-las-worker.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
