// Script para aplicar la pol√≠tica RLS
require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîê Aplicando Pol√≠tica RLS para Workers');
console.log('=====================================');

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function applyRLSPolicy() {
  try {
    console.log('\nüìã Habilitando RLS en tabla workers...');

    const { error: enableError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE workers ENABLE ROW LEVEL SECURITY;',
    });

    if (enableError) {
      console.log(
        '‚ö†Ô∏è Error al habilitar RLS (puede que ya est√© habilitado):',
        enableError.message
      );
    } else {
      console.log('‚úÖ RLS habilitado en workers');
    }

    console.log('\nüìù Creando pol√≠tica de acceso p√∫blico...');

    const { error: policyError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Allow public read access to workers" ON workers
        FOR SELECT
        TO public
        USING (true);
      `,
    });

    if (policyError) {
      console.log('‚ùå Error al crear pol√≠tica:', policyError.message);

      // Si la pol√≠tica ya existe, intentar recrearla
      if (policyError.message.includes('already exists')) {
        console.log('üîÑ Pol√≠tica ya existe, intentando reemplazarla...');

        // Primero eliminar la pol√≠tica existente
        const { error: dropError } = await supabase.rpc('exec_sql', {
          sql: 'DROP POLICY IF EXISTS "Allow public read access to workers" ON workers;',
        });

        if (dropError) {
          console.log(
            '‚ùå Error al eliminar pol√≠tica existente:',
            dropError.message
          );
        } else {
          console.log('‚úÖ Pol√≠tica anterior eliminada');

          // Crear la nueva pol√≠tica
          const { error: recreateError } = await supabase.rpc('exec_sql', {
            sql: `
              CREATE POLICY "Allow public read access to workers" ON workers
              FOR SELECT
              TO public
              USING (true);
            `,
          });

          if (recreateError) {
            console.log('‚ùå Error al recrear pol√≠tica:', recreateError.message);
          } else {
            console.log('‚úÖ Pol√≠tica recreada exitosamente');
          }
        }
      }
    } else {
      console.log('‚úÖ Pol√≠tica creada exitosamente');
    }

    console.log('\nüß™ Probando acceso con cliente an√≥nimo...');

    // Crear cliente an√≥nimo para probar
    const anonSupabase = createClient(
      supabaseUrl,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );

    const { data: testWorkers, error: testError } = await anonSupabase
      .from('workers')
      .select('id, name, surname, email')
      .limit(10);

    console.log('üìä Resultado con cliente an√≥nimo:', {
      workersCount: testWorkers?.length || 0,
      error: testError ? testError.message : null,
    });

    if (testWorkers && testWorkers.length > 0) {
      console.log('\n‚úÖ ¬°√âXITO! Pol√≠tica RLS funcionando correctamente');
      console.log('üìã Workers accesibles para usuarios an√≥nimos:');

      testWorkers.forEach((worker, index) => {
        console.log(
          `  ${index + 1}. ${worker.name} ${worker.surname} (${worker.email})`
        );
      });

      console.log('\nüéâ ¬°PROBLEMA RESUELTO!');
      console.log('====================');
      console.log(
        '‚úÖ El endpoint /api/workers ahora deber√≠a devolver los workers'
      );
      console.log(
        '‚úÖ Los usuarios an√≥nimos pueden acceder a la lista de workers'
      );
      console.log('‚úÖ El sistema de notificaciones funcionar√° correctamente');
    } else {
      console.log('\n‚ùå La pol√≠tica RLS no est√° funcionando a√∫n');

      // Intentar alternativa: verificar si podemos usar service role en el endpoint
      console.log('\nüîÑ ALTERNATIVA: Usar service role en el endpoint...');

      const serviceSupabase = createClient(supabaseUrl, serviceRoleKey);
      const { data: serviceWorkers, error: serviceError } =
        await serviceSupabase
          .from('workers')
          .select('id, name, surname, email')
          .limit(10);

      if (serviceWorkers && serviceWorkers.length > 0) {
        console.log('‚úÖ Service role funciona correctamente');
        console.log(
          'üí° SOLUCI√ìN: Modificar el endpoint para usar service role'
        );

        // Aqu√≠ podr√≠amos modificar el endpoint para usar service role
        // Pero eso ser√≠a menos seguro, as√≠ que intentemos arreglar RLS primero
      }
    }
  } catch (error) {
    console.log('\n‚ùå ERROR GENERAL:', error.message);
  }
}

applyRLSPolicy().catch(console.error);
