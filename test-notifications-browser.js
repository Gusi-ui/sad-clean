/**
 * Script para probar notificaciones desde el navegador
 * Copia y pega este c√≥digo en la consola del navegador cuando est√©s en:
 * 1. La p√°gina de assignments (/assignments)
 * 2. La p√°gina de prueba de notificaciones (/test-notifications)
 * 3. El dashboard de trabajadoras (/worker-dashboard)
 */

// Funci√≥n para probar notificaciones b√°sicas
async function testBasicNotification() {
  console.log('üß™ Probando notificaci√≥n b√°sica...');

  try {
    const response = await fetch('/api/test-notifications', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        workerId: 'test-worker-id',
        title: 'üß™ Notificaci√≥n de Prueba',
        body: 'Esta es una notificaci√≥n de prueba desde el navegador',
        type: 'system_message',
      }),
    });

    const result = await response.json();
    console.log('üìã Resultado:', result);

    if (response.ok && result.success) {
      console.log('‚úÖ Notificaci√≥n enviada exitosamente');
    } else {
      console.error('‚ùå Error enviando notificaci√≥n:', result.error);
    }
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Funci√≥n para probar notificaci√≥n de cambio de asignaci√≥n
async function testAssignmentNotification(workerId, oldHours, newHours) {
  console.log('üìã Probando notificaci√≥n de cambio de asignaci√≥n...');

  try {
    const response = await fetch(
      '/api/workers/' + workerId + '/notifications',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: 'üìã Asignaci√≥n modificada',
          body: `Tus horas semanales han sido ${newHours > oldHours ? 'aumentado' : 'reducido'} de ${oldHours}h a ${newHours}h`,
          type: 'assignment_change',
          priority: 'high',
          data: {
            oldHours,
            newHours,
            difference: Math.abs(newHours - oldHours),
            changeType: newHours > oldHours ? 'aumentado' : 'reducido',
          },
        }),
      }
    );

    const result = await response.json();
    console.log('üìã Resultado:', result);

    if (response.ok) {
      console.log('‚úÖ Notificaci√≥n de asignaci√≥n enviada exitosamente');
    } else {
      console.error(
        '‚ùå Error enviando notificaci√≥n de asignaci√≥n:',
        result.error
      );
    }
  } catch (error) {
    console.error('‚ùå Error en la prueba de asignaci√≥n:', error);
  }
}

// Funci√≥n para probar la recepci√≥n de notificaciones en tiempo real
function testRealtimeNotifications() {
  console.log('üîÑ Probando recepci√≥n de notificaciones en tiempo real...');

  // Esta funci√≥n debe ejecutarse desde la p√°gina del worker dashboard
  // donde el hook useNotifications est√° activo
  console.log(
    'üí° Aseg√∫rate de estar en /worker-dashboard para probar tiempo real'
  );
  console.log(
    'üí° Las notificaciones deber√≠an aparecer autom√°ticamente en el NotificationCenter'
  );
}

// Funci√≥n para verificar estado de notificaciones
async function checkNotificationStatus(workerId) {
  console.log('üìä Verificando estado de notificaciones...');

  try {
    // Obtener notificaciones
    const notificationsResponse = await fetch(
      `/api/workers/${workerId}/notifications`
    );
    const notifications = await notificationsResponse.json();
    console.log('üìã Notificaciones:', notifications);

    // Obtener conteo de no le√≠das
    const unreadResponse = await fetch(
      `/api/workers/${workerId}/notifications/unread-count`
    );
    const unreadData = await unreadResponse.json();
    console.log('üìä Conteo de no le√≠das:', unreadData);
  } catch (error) {
    console.error('‚ùå Error verificando estado:', error);
  }
}

// Funci√≥n principal para ejecutar todas las pruebas
async function runAllTests() {
  console.log('üöÄ Iniciando pruebas completas de notificaciones...\n');

  // Ejecutar diagn√≥stico primero
  console.log('üîç Paso 1: Diagn√≥stico de base de datos');
  const diagnosisOK = await diagnoseDatabase();

  if (!diagnosisOK) {
    console.log(
      '‚ùå Diagn√≥stico fallido. Corrige los problemas antes de continuar.'
    );
    console.log('üí° Posibles soluciones:');
    console.log('   - Verifica las variables de entorno de Supabase');
    console.log('   - Aseg√∫rate de que las tablas existan en la base de datos');
    console.log('   - Revisa las pol√≠ticas RLS');
    return;
  }

  console.log('\nüîó Paso 2: Verificar conectividad');
  // Verificar conectividad
  const isConnected = await testSupabaseConnection();
  if (!isConnected) {
    console.log('‚ùå No hay conectividad. Revisa la configuraci√≥n de Supabase.');
    return;
  }

  console.log('\nüß™ Paso 3: Enviar notificaci√≥n de prueba');
  // Prueba b√°sica
  await testBasicNotification();

  // Esperar un poco
  await new Promise((resolve) => setTimeout(resolve, 1000));

  console.log('\nüìä Paso 4: Verificar estado');
  // Verificar estado
  await checkNotificationStatus('test-worker-id');

  // Instrucciones para pruebas manuales
  console.log('\nüìù INSTRUCCIONES PARA PRUEBAS MANUALES:');
  console.log('1. Ve a /test-notifications para usar la interfaz gr√°fica');
  console.log('2. Ve a /assignments y modifica una asignaci√≥n');
  console.log(
    '3. Ve a /worker-dashboard y verifica si llegan las notificaciones'
  );
  console.log('4. Revisa la consola del navegador para logs de debug');
}

// Funci√≥n para limpiar la sesi√≥n de Supabase (√∫til para errores de autenticaci√≥n)
async function clearSupabaseSession() {
  console.log('üßπ Limpiando sesi√≥n de Supabase...');

  try {
    // Limpiar localStorage y sessionStorage
    localStorage.clear();
    sessionStorage.clear();

    // Limpiar cookies
    document.cookie.split(';').forEach((c) => {
      document.cookie = c
        .replace(/^ +/, '')
        .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
    });

    console.log('‚úÖ Sesi√≥n limpiada. Recarga la p√°gina.');
  } catch (error) {
    console.error('‚ùå Error limpiando sesi√≥n:', error);
  }
}

// Funci√≥n para probar la conectividad b√°sica
async function testSupabaseConnection() {
  console.log('üîó Probando conectividad con Supabase...');

  try {
    const response = await fetch('/api/test-notifications', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        workerId: 'connection-test',
        title: 'Test de Conectividad',
        body: 'Verificando conexi√≥n b√°sica',
        type: 'system_message',
      }),
    });

    if (response.ok) {
      console.log('‚úÖ Conexi√≥n con Supabase OK');
      return true;
    } else {
      const error = await response.text();
      console.error('‚ùå Error de conexi√≥n:', response.status, error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error de red:', error);
    return false;
  }
}

// Hacer las funciones disponibles globalmente
window.testBasicNotification = testBasicNotification;
window.testAssignmentNotification = testAssignmentNotification;
window.testRealtimeNotifications = testRealtimeNotifications;
window.checkNotificationStatus = checkNotificationStatus;
window.clearSupabaseSession = clearSupabaseSession;
window.testSupabaseConnection = testSupabaseConnection;
window.runAllTests = runAllTests;

// Nueva funci√≥n para diagnosticar la base de datos
async function diagnoseDatabase() {
  console.log('üîç Ejecutando diagn√≥stico de base de datos...');

  try {
    const response = await fetch('/api/diagnose');

    if (!response.ok) {
      console.error('‚ùå Error en diagn√≥stico:', response.status);
      return false;
    }

    const result = await response.json();
    console.log('üìã Resultados del diagn√≥stico:');

    // Mostrar configuraci√≥n de Supabase
    console.log('üîß Configuraci√≥n Supabase:');
    console.log(
      '   URL:',
      result.supabase && result.supabase.url
        ? result.supabase.url
        : 'No configurada'
    );
    console.log(
      '   Key:',
      result.supabase && result.supabase.key
        ? result.supabase.key
        : 'No configurada'
    );

    // Mostrar resultados de tests
    console.log('üß™ Tests realizados:');
    Object.entries(result.tests || {}).forEach(function (entry) {
      var testName = entry[0];
      var testResult = entry[1];
      var test = testResult; // { status: string; error?: string; data?: unknown }
      if (test.status === 'OK') {
        console.log('   ‚úÖ ' + testName + ': ' + test.status);
        if (test.data) {
          console.log('      Datos:', test.data);
        }
      } else {
        console.log('   ‚ùå ' + testName + ': ' + test.status);
        if (test.error) {
          console.log('      Error: ' + test.error);
        }
      }
    });

    var tests = result.tests || {};
    return (
      tests.connection &&
      tests.connection.status === 'OK' &&
      tests.worker_notifications &&
      tests.worker_notifications.status === 'OK'
    );
  } catch (error) {
    console.error('‚ùå Error ejecutando diagn√≥stico:', error);
    return false;
  }
}

window.diagnoseDatabase = diagnoseDatabase;

console.log('üß™ Funciones de prueba de notificaciones cargadas:');
console.log('- testBasicNotification() - Prueba b√°sica');
console.log(
  '- testAssignmentNotification(workerId, oldHours, newHours) - Prueba de asignaci√≥n'
);
console.log('- testRealtimeNotifications() - Prueba tiempo real');
console.log('- checkNotificationStatus(workerId) - Verificar estado');
console.log(
  '- clearSupabaseSession() - Limpiar sesi√≥n (√∫til para errores de auth)'
);
console.log('- testSupabaseConnection() - Verificar conectividad b√°sica');
console.log(
  '- diagnoseDatabase() - üîç DIAGNOSTICAR base de datos (recomendado primero)'
);
console.log('- runAllTests() - Ejecutar todas las pruebas');
console.log(
  '\nüí° Ejecuta diagnoseDatabase() primero para verificar la configuraci√≥n'
);
console.log(
  'üí° Luego ejecuta runAllTests() para iniciar todas las pruebas autom√°ticamente'
);
console.log(
  'üö® Si hay errores de "Invalid Refresh Token", ejecuta clearSupabaseSession() primero'
);
