#!/usr/bin/env node

/**
 * Script de debug para analizar tokens de recuperaci√≥n
 * SAD gusi - Diagn√≥stico de Tokens
 */

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

function analyzeToken(token) {
  console.log('\nüîç AN√ÅLISIS DEL TOKEN:\n');

  const trimmedToken = token.trim();

  console.log('üìù Token original:');
  console.log(trimmedToken);
  console.log('\n' + '='.repeat(60));

  // An√°lisis b√°sico
  console.log('\nüîé CARACTER√çSTICAS B√ÅSICAS:');
  console.log(`‚Ä¢ Longitud: ${trimmedToken.length} caracteres`);
  console.log(`‚Ä¢ Contiene '#': ${trimmedToken.includes('#')}`);
  console.log(`‚Ä¢ Contiene '?': ${trimmedToken.includes('?')}`);
  console.log(
    `‚Ä¢ Contiene 'access_token': ${trimmedToken.includes('access_token')}`
  );
  console.log(
    `‚Ä¢ Contiene 'refresh_token': ${trimmedToken.includes('refresh_token')}`
  );
  console.log(`‚Ä¢ Contiene 'type': ${trimmedToken.includes('type')}`);

  // Intentar diferentes m√©todos de parsing
  console.log('\nüîß INTENTANDO M√âTODOS DE PARSING:');

  let accessToken = null;
  let refreshToken = null;
  let tokenType = null;

  // M√©todo 1: Hash
  if (trimmedToken.includes('#')) {
    console.log('\nüìã M√âTODO 1 - Hash parsing:');
    const hashPart = trimmedToken.split('#')[1];
    if (hashPart) {
      const hashParams = new URLSearchParams(hashPart);
      accessToken = hashParams.get('access_token');
      refreshToken = hashParams.get('refresh_token');
      tokenType = hashParams.get('type');

      console.log(`‚Ä¢ Parte hash: ${hashPart.substring(0, 50)}...`);
      console.log(`‚Ä¢ Access token encontrado: ${accessToken ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚Ä¢ Refresh token encontrado: ${refreshToken ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚Ä¢ Type encontrado: ${tokenType || 'N/A'}`);
    } else {
      console.log('‚Ä¢ No se encontr√≥ parte hash');
    }
  }

  // M√©todo 2: Query string
  if (!accessToken || !refreshToken) {
    console.log('\nüìã M√âTODO 2 - Query parsing:');
    try {
      const urlObj = new URL(trimmedToken);
      const queryAccess = urlObj.searchParams.get('access_token');
      const queryRefresh = urlObj.searchParams.get('refresh_token');
      const queryType = urlObj.searchParams.get('type');

      if (queryAccess || queryRefresh) {
        accessToken = queryAccess;
        refreshToken = queryRefresh;
        tokenType = queryType;
        console.log(`‚Ä¢ Query access token: ${queryAccess ? '‚úÖ' : '‚ùå'}`);
        console.log(`‚Ä¢ Query refresh token: ${queryRefresh ? '‚úÖ' : '‚ùå'}`);
        console.log(`‚Ä¢ Query type: ${queryType || 'N/A'}`);
      } else {
        console.log('‚Ä¢ No se encontraron par√°metros query');
      }
    } catch {
      console.log('‚Ä¢ No es una URL v√°lida para query parsing');
    }
  }

  // M√©todo 3: Direct parsing (access_token/refresh_token)
  if (!accessToken || !refreshToken) {
    console.log('\nüìã M√âTODO 3 - Direct parsing (access_token/refresh_token):');
    const accessMatch = trimmedToken.match(/access_token=([^&]+)/);
    const refreshMatch = trimmedToken.match(/refresh_token=([^&]+)/);
    const typeMatch = trimmedToken.match(/type=([^&]+)/);

    if (accessMatch || refreshMatch) {
      accessToken = accessMatch ? accessMatch[1] : accessToken;
      refreshToken = refreshMatch ? refreshMatch[1] : refreshToken;
      tokenType = typeMatch ? typeMatch[1] : tokenType;

      console.log(`‚Ä¢ Direct access token: ${accessMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚Ä¢ Direct refresh token: ${refreshMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚Ä¢ Direct type: ${typeMatch ? typeMatch[1] : 'N/A'}`);
    } else {
      console.log('‚Ä¢ No se encontraron tokens access_token/refresh_token');
    }
  }

  // M√©todo 4: Supabase verify token (TU FORMATO)
  if (!accessToken && !refreshToken) {
    console.log('\nüìã M√âTODO 4 - Supabase verify token:');
    const tokenMatch = trimmedToken.match(/token=([^&]+)/);
    const typeMatch = trimmedToken.match(/type=([^&]+)/);
    const supabaseUrlMatch = trimmedToken.match(
      /https:\/\/([^.]+)\.supabase\.co/
    );

    if (tokenMatch && typeMatch) {
      const verifyToken = tokenMatch[1];
      const tokenTypeFound = typeMatch[1];
      const projectId = supabaseUrlMatch ? supabaseUrlMatch[1] : 'unknown';

      console.log(
        `‚Ä¢ Token de verificaci√≥n: ‚úÖ ENCONTRADO (${verifyToken.substring(0, 20)}...)`
      );
      console.log(`‚Ä¢ Tipo: ${tokenTypeFound}`);
      console.log(`‚Ä¢ Proyecto Supabase: ${projectId}`);
      console.log(`‚Ä¢ URL completa: ‚úÖ V√ÅLIDA`);

      console.log('\nüéâ ¬°FORMATO DE SUPABASE RECONOCIDO!');
      console.log('Este es un token de verificaci√≥n est√°ndar de Supabase.');
      console.log('Necesitas usar la URL directa de verificaci√≥n.');
      console.log('\nüìã INSTRUCCIONES:');
      console.log('1. Usa esta URL directamente en tu navegador:');
      console.log(`   ${trimmedToken}`);
      console.log('2. O configura tu aplicaci√≥n para redirigir correctamente');
      console.log('3. El token se procesar√° autom√°ticamente por Supabase');

      return {
        accessToken: null,
        refreshToken: null,
        tokenType: tokenTypeFound,
        supabaseVerifyToken: verifyToken,
        isSupabaseVerifyFormat: true,
      };
    } else {
      console.log('‚Ä¢ No es un token de verificaci√≥n de Supabase');
    }
  }

  // Resultado final
  console.log('\nüéØ RESULTADO FINAL:');
  console.log(
    `‚Ä¢ Access Token: ${accessToken ? '‚úÖ ENCONTRADO' : '‚ùå NO ENCONTRADO'}`
  );
  console.log(
    `‚Ä¢ Refresh Token: ${refreshToken ? '‚úÖ ENCONTRADO' : '‚ùå NO ENCONTRADO'}`
  );
  console.log(`‚Ä¢ Token Type: ${tokenType || 'N/A'}`);

  if (accessToken && refreshToken) {
    console.log('\nüéâ ¬°TOKENS V√ÅLIDOS ENCONTRADOS!');
    console.log('Tu token deber√≠a funcionar en la p√°gina de reset.');

    if (tokenType && tokenType !== 'recovery') {
      console.log('‚ö†Ô∏è  Advertencia: El tipo de token no es "recovery"');
    }
  } else {
    console.log('\n‚ùå TOKENS NO ENCONTRADOS');
    console.log('Verifica que hayas copiado la URL completa del email.');
    console.log('La URL debe contener "access_token=" y "refresh_token="');
  }

  console.log('\nüí° RECOMENDACIONES:');
  console.log('‚Ä¢ Copia la URL completa del email');
  console.log('‚Ä¢ Aseg√∫rate de no cortar el texto');
  console.log('‚Ä¢ Incluye todo desde "http://" hasta el final');
  console.log('‚Ä¢ Si usas m√≥vil, aseg√∫rate de que no haya saltos de l√≠nea');

  return { accessToken, refreshToken, tokenType };
}

async function main() {
  console.log('üîê DEBUG DE TOKEN - SAD gusi\n');
  console.log(
    'Este script te ayudar√° a diagnosticar problemas con tu token de recuperaci√≥n.\n'
  );

  const token = await askQuestion(
    'üìã Pega aqu√≠ tu URL/token completo del email:\n'
  );

  if (!token || !token.trim()) {
    console.log('‚ùå No se proporcion√≥ ning√∫n token');
    process.exit(1);
  }

  analyzeToken(token);

  rl.close();
}

main();
