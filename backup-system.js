// Sistema de Backup Autom√°tico para prevenir p√©rdida de datos
// Ejecutar peri√≥dicamente en producci√≥n

class DataBackupSystem {
  constructor() {
    this.backupInterval = null;
    this.backupFrequency = 1000 * 60 * 30; // 30 minutos
  }

  // Iniciar backup autom√°tico
  startAutoBackup() {
    console.log('üîÑ Iniciando sistema de backup autom√°tico...');
    console.log(
      `üìÖ Frecuencia: cada ${this.backupFrequency / 1000 / 60} minutos`
    );

    this.backupInterval = setInterval(() => {
      this.createBackup();
    }, this.backupFrequency);

    // Primer backup inmediato
    this.createBackup();
  }

  // Detener backup autom√°tico
  stopAutoBackup() {
    if (this.backupInterval) {
      clearInterval(this.backupInterval);
      console.log('‚èπÔ∏è Sistema de backup autom√°tico detenido');
    }
  }

  // Crear backup completo
  async createBackup() {
    const timestamp = new Date().toISOString();
    console.log(`\nüíæ Creando backup: ${timestamp}`);

    try {
      const backup = {
        timestamp,
        data: {},
      };

      // Backup de usuarios
      try {
        const usersResponse = await fetch('/api/users');
        if (usersResponse.ok) {
          const usersData = await usersResponse.json();
          backup.data.users = usersData.users || [];
          console.log(`üë§ Usuarios respaldados: ${backup.data.users.length}`);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Error respaldando usuarios:', error.message);
      }

      // Backup de workers
      try {
        const workersResponse = await fetch('/api/workers');
        if (workersResponse.ok) {
          const workersData = await workersResponse.json();
          backup.data.workers = workersData.workers || [];
          console.log(`üë• Workers respaldados: ${backup.data.workers.length}`);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Error respaldando workers:', error.message);
      }

      // Backup de asignaciones
      try {
        const assignmentsResponse = await fetch('/api/assignments');
        if (assignmentsResponse.ok) {
          const assignmentsData = await assignmentsResponse.json();
          backup.data.assignments = assignmentsData.assignments || [];
          console.log(
            `üìã Asignaciones respaldadas: ${backup.data.assignments.length}`
          );
        } else {
          console.warn('‚ö†Ô∏è Endpoint de assignments no disponible');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Error respaldando assignments:', error.message);
      }

      // Guardar backup en localStorage
      const backupKey = `backup_${Date.now()}`;
      localStorage.setItem(backupKey, JSON.stringify(backup));

      // Mantener solo los √∫ltimos 10 backups
      this.cleanupOldBackups();

      console.log(`‚úÖ Backup guardado: ${backupKey}`);
      console.log(
        `üìä Total registros: ${
          (backup.data.users?.length || 0) +
          (backup.data.workers?.length || 0) +
          (backup.data.assignments?.length || 0)
        }`
      );

      return backup;
    } catch (error) {
      console.error('‚ùå Error creando backup:', error);
      return null;
    }
  }

  // Limpiar backups antiguos
  cleanupOldBackups() {
    const backupKeys = Object.keys(localStorage)
      .filter((key) => key.startsWith('backup_'))
      .sort()
      .reverse();

    // Mantener solo los √∫ltimos 10
    if (backupKeys.length > 10) {
      const keysToRemove = backupKeys.slice(10);
      keysToRemove.forEach((key) => {
        localStorage.removeItem(key);
      });
      console.log(`üóëÔ∏è Backups antiguos eliminados: ${keysToRemove.length}`);
    }
  }

  // Listar backups disponibles
  listBackups() {
    const backupKeys = Object.keys(localStorage)
      .filter((key) => key.startsWith('backup_'))
      .sort()
      .reverse();

    console.log('\nüìã BACKUPS DISPONIBLES:');
    console.log('=======================');

    backupKeys.forEach((key, index) => {
      try {
        const backup = JSON.parse(localStorage.getItem(key));
        const date = new Date(backup.timestamp).toLocaleString();
        const totalRecords =
          (backup.data.users?.length || 0) +
          (backup.data.workers?.length || 0) +
          (backup.data.assignments?.length || 0);

        console.log(`${index + 1}. ${key}`);
        console.log(`   üìÖ Fecha: ${date}`);
        console.log(`   üìä Registros: ${totalRecords}`);
        console.log(`   üë§ Usuarios: ${backup.data.users?.length || 0}`);
        console.log(`   üë• Workers: ${backup.data.workers?.length || 0}`);
        console.log(
          `   üìã Asignaciones: ${backup.data.assignments?.length || 0}`
        );
        console.log('');
      } catch (error) {
        console.warn(`‚ùå Error leyendo backup ${key}:`, error.message);
      }
    });

    return backupKeys;
  }

  // Restaurar desde backup
  async restoreBackup(backupKey) {
    try {
      console.log(`üîÑ Restaurando desde backup: ${backupKey}`);

      const backupData = localStorage.getItem(backupKey);
      if (!backupData) {
        console.error('‚ùå Backup no encontrado');
        return false;
      }

      const backup = JSON.parse(backupData);
      console.log(
        `üìÖ Fecha del backup: ${new Date(backup.timestamp).toLocaleString()}`
      );

      let restoredCount = 0;

      // Restaurar usuarios
      if (backup.data.users && backup.data.users.length > 0) {
        console.log(`üë§ Restaurando ${backup.data.users.length} usuarios...`);
        for (const user of backup.data.users) {
          try {
            const response = await fetch('/api/users', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(user),
            });
            if (response.ok) restoredCount++;
          } catch (error) {
            console.warn(
              `‚ö†Ô∏è Error restaurando usuario ${user.name}:`,
              error.message
            );
          }
        }
      }

      // Nota: Para workers y assignments necesitar√≠as los endpoints correspondientes
      console.log(
        `‚úÖ Restauraci√≥n completada: ${restoredCount} registros restaurados`
      );
      return true;
    } catch (error) {
      console.error('‚ùå Error en restauraci√≥n:', error);
      return false;
    }
  }

  // Verificar integridad de backups
  verifyBackups() {
    const backupKeys = Object.keys(localStorage).filter((key) =>
      key.startsWith('backup_')
    );

    console.log('\nüîç VERIFICACI√ìN DE BACKUPS:');
    console.log('===========================');

    let validBackups = 0;
    let corruptedBackups = 0;

    backupKeys.forEach((key) => {
      try {
        const backup = JSON.parse(localStorage.getItem(key));
        if (backup.timestamp && backup.data) {
          validBackups++;
          console.log(`‚úÖ ${key}: V√°lido`);
        } else {
          corruptedBackups++;
          console.log(`‚ùå ${key}: Estructura inv√°lida`);
        }
      } catch (error) {
        corruptedBackups++;
        console.log(`‚ùå ${key}: Corrupto (${error.message})`);
      }
    });

    console.log('\nüìä RESUMEN:');
    console.log(`‚úÖ Backups v√°lidos: ${validBackups}`);
    console.log(`‚ùå Backups corruptos: ${corruptedBackups}`);
    console.log(`üì¶ Total: ${backupKeys.length}`);
  }
}

// Crear instancia global
const backupSystem = new DataBackupSystem();

// Funciones helper para consola
function startBackupSystem() {
  backupSystem.startAutoBackup();
}

function stopBackupSystem() {
  backupSystem.stopAutoBackup();
}

function createManualBackup() {
  return backupSystem.createBackup();
}

function listAvailableBackups() {
  return backupSystem.listBackups();
}

function verifyBackupIntegrity() {
  backupSystem.verifyBackups();
}

function restoreFromBackup(backupKey) {
  return backupSystem.restoreBackup(backupKey);
}

// Exponer funciones globales
window.backupSystem = backupSystem;
window.startBackupSystem = startBackupSystem;
window.stopBackupSystem = stopBackupSystem;
window.createManualBackup = createManualBackup;
window.listAvailableBackups = listAvailableBackups;
window.verifyBackupIntegrity = verifyBackupIntegrity;
window.restoreFromBackup = restoreFromBackup;

console.log('üíæ SISTEMA DE BACKUP AUTOM√ÅTICO CARGADO');
console.log('======================================');
console.log('');
console.log('üöÄ FUNCIONES DISPONIBLES:');
console.log('startBackupSystem()     - Iniciar backup autom√°tico');
console.log('stopBackupSystem()      - Detener backup autom√°tico');
console.log('createManualBackup()    - Crear backup manual');
console.log('listAvailableBackups()  - Listar backups disponibles');
console.log('verifyBackupIntegrity() - Verificar integridad de backups');
console.log('restoreFromBackup(key)  - Restaurar desde backup espec√≠fico');
console.log('');
console.log(
  'üí° RECOMENDACI√ìN: Ejecuta startBackupSystem() para protecci√≥n autom√°tica'
);
console.log('üí° Los backups se guardan en localStorage del navegador');
